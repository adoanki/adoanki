from pyspark.sql import SparkSession
from datetime import datetime
from pyspark.sql.functions import *
from pyspark.sql.types import StringType
from pyspark import StorageLevel

# Imports from S3
from load_fct_dpm_return import load_fct_dpm_return
from common_function import get_spark_session
from common_function import get_run_rk
from common_function import get_return_rk
from common_function import get_template_rk
from common_function import read_config

###################################################################################################################
############# This function will create a temp view on the spark session                            ###############
#############    that will be used in gathering attributes for prepare_C_08_01_3_0_temp_df          ###############
#############    This function is called inside DPM_C_08_01 function.                               ###############
###################################################################################################################
def get_input_df_for_prepare_C_08_01_3_0_temp_df(spark, rtd_mart_db, srtd_mart_db, frank_db, v_year_month_rk, p_reporting_date):

      query = f"""
            SELECT  
                  --fct.deal_id,
                  fct.RWA_CALC_METHOD,
                  fct.EAD_PD_NUMERATOR,
                  fct.EAD_PD_NUMERATOR_ON,
                  fct.EAD_POST_CRM_AMT,
                  fct.B2_IRB_EAD_AMT_ONBAL,
                  fct.EAD_PD_NUMERATOR_OFF,
                  fct.B2_IRB_EAD_AMT_OFBAL,
                  fct.B2_IRB_ORIG_EXP_PRE_CON_FACTOR,
                  fct.IRB_ORIG_EXP_PRE_CONV_ONBAL,
                  fct.LRFE_UFE_FLAG,
                  fct.IRB_ORIG_EXP_PRE_CONV_OFBAL,
                  fct.corep_exposure_category,
                  fct.ACLM_PRODUCT_TYPE,
                  fct.B2_IRB_CRM_UFCP_GUAR_AMT,
                  fct.B2_IRB_CRM_UFCP_CRED_DERIV_AMT,
                  fct.B2_IRB_CRM_FCP_OTH_FUNDED_AMT,
                  fct.B2_IRB_CRM_COD_AMT,
                  fct.B2_IRB_CRM_LIP_AMT,
                  fct.B2_IRB_CRM_FCP_ELG_FIN_COL_AMT,
                  fct.B2_IRB_CRM_FCP_REAL_ESTATE_AMT,
                  fct.B2_IRB_CRM_FCP_OTH_PHY_COL_AMT,
                  fct.B2_IRB_CRM_FCP_RECEIVABLES_AMT,
                  fct.B2_IRB_CRM_UFCP_DOUBLE_DEF_AMT,
                  fct.EAD_LGD_NUMERATOR,
                  fct.EAD_LGD_NUMERATOR_ON,
                  fct.EAD_LGD_NUMERATOR_OFF,
                  dac.REG_EXPOSURE_TYPE,
                  fct.EAD_MAT_YEARS_NUMERATOR,
                  fct.EAD_MAT_YEARS_NUMERATOR_ON,
                  fct.EAD_MAT_YEARS_NUMERATOR_OFF,
                  fct.RWA_POST_CRM_PRE_SPRT_AMOUNT,
                  fct.B2_IRB_RWA_PRE_SPRT_AMT_ONBAL,
                  fct.B2_IRB_RWA_PRE_SPRT_AMT_OFBAL,
                  fct.B3_SME_DISCOUNT_FLAG,
                  fct.RWA_POST_CRM_AMOUNT,
                  fct.B2_IRB_RWA_AMT_ONBAL,
                  fct.B2_IRB_RWA_AMT_OFBAL,
                  fct.CRR2_501A_DISCOUNT_FLAG,
                  fct.B2_APP_EXPECTED_LOSS_AMT,
                  fct.B2_IRB_EL_AMT_ONBAL,
                  fct.B2_IRB_EL_AMT_OFBAL,
                  fct.B2_IRB_PROVISIONS_AMT,
                  fct.OBLIGOR_TYPE,
                  fct.RETAIL_OBLIGOR_COUNT,
                  fct.B2_IRB_RWA_PRE_CDS,
                  dac.REG_EXPOSURE_TYPE,
                  fct.YEAR_MONTH,
                  fct.REPORTING_REGULATOR_CODE,
                  fct.RISK_TAKER_RRU,
                  fct.RISK_ON_RRU,
                  fct.INTERNAL_TRANSACTION_FLAG,
                  fct.REPORTING_TYPE_CODE,
                  fct.MATURITY_BAND_DESC
            FROM  {srtd_mart_db}.corep_crd4_mart_vamsi fct,
                  {frank_db}.DIM_ASSET_CLASS dac,
                  {rtd_mart_db}.DPM_PARAMETER d_parm_div
            WHERE fct.YEAR_MONTH = {v_year_month_rk}
                  AND dac.ASSET_CLASS_RK = fct.COREP_IRB_ASSET_CLASS_RK
                  AND fct.DIVISION = d_parm_div.PARAMETER1_VALUE
                  AND d_parm_div.param_code = 'DIVISION'
                  AND d_parm_div.PARAMETER2_VALUE = 'Y'
                  AND d_parm_div.valid_from_date <= "{p_reporting_date}"
                  AND d_parm_div.valid_to_date > "{p_reporting_date}"
                  AND fct.REPORTING_REGULATOR_CODE IN ( 'UK-FSA', 'CBI')
                  AND fct.RWA_APPROACH_CODE = 'AIRB'
                  AND fct.ADJUST_FLAG = 'A' AND (   (fct.CRD4_REP_IRB_FLAG = 'Y') OR (    fct.ACLM_PRODUCT_TYPE = 'BASEL-OTC' AND fct.BASEL_DATA_FLAG = 'N') )
                  AND COALESCE (fct.REPORTING_TYPE_CODE, 'X') NOT IN ('MR', 'NC', 'OR', 'SR')
                  AND dac.REG_EXPOSURE_TYPE IN
                  ( 'Central governments and central banks'
                        ,'Institutions'
                        ,'Corporates - SME'
                        ,'Corporates - Specialised Lending'
                        ,'Corporates - Other'
                        ,'Retail - Secured by immovable property SME'
                        ,'Retail - Secured by immovable property non-SME'
                        ,'Retail - Qualifying revolving'
                        ,'Retail - Other SME'
                        ,'Retail - Other non-SME')
      """
      input_df = spark.sql(query)
      return input_df

###################################################################################################################
#############    This function is called inside DPM_C_08_01 function to create view int_agg.        ###############
###################################################################################################################
def prepare_C_08_01_3_0_temp_df(spark,v_return_code,v_return_rk,p_run_rk,v_template_rk):
    query=f'''
      SELECT  
            --input_df.deal_id,
            cast( 0 as double) as  C0010,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.EAD_PD_NUMERATOR,0)
                  ELSE 0
                  END)                                            C0010_NUMERATOR,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.EAD_POST_CRM_AMT,0)
                  ELSE 0
                  END)                                            C0010_DENOMINATOR,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.EAD_PD_NUMERATOR_ON,0)
                  ELSE 0
                  END)                                            C0010_NUMERATOR_ONBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_EAD_AMT_ONBAL,0)
                  ELSE 0
                  END)                                            C0010_DENOMINATOR_ONBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.EAD_PD_NUMERATOR_OFF,0)
                  ELSE 0
                  END)                                            C0010_NUMERATOR_OFBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_EAD_AMT_OFBAL,0)
                  ELSE 0
                  END)                                            C0010_DENOMINATOR_OFBAL,
            SUM(Coalesce(input_df.B2_IRB_ORIG_EXP_PRE_CON_FACTOR,0))      C0020,
            SUM(Coalesce(input_df.IRB_ORIG_EXP_PRE_CONV_ONBAL,0))         C0020_ONBAL,
            SUM(Coalesce(input_df.IRB_ORIG_EXP_PRE_CONV_OFBAL,0))         C0020_OFBAL,
            SUM(CASE
                  WHEN input_df.LRFE_UFE_FLAG = 'Y'
                  THEN Coalesce(input_df.B2_IRB_ORIG_EXP_PRE_CON_FACTOR,0)
                  ELSE 0
                  END)                                            C0030,
            SUM(Coalesce(input_df.B2_IRB_ORIG_EXP_PRE_CON_FACTOR,0))      C0090,
            SUM(Coalesce(input_df.IRB_ORIG_EXP_PRE_CONV_ONBAL,0))         C0090_ONBAL,
            SUM(Coalesce(input_df.IRB_ORIG_EXP_PRE_CONV_OFBAL,0))         C0090_OFBAL,
            SUM(Coalesce(input_df.IRB_ORIG_EXP_PRE_CONV_OFBAL,0))         C0100,
            SUM(Coalesce(input_df.EAD_POST_CRM_AMT,0))                    C0110,
            SUM(Coalesce(input_df.B2_IRB_EAD_AMT_ONBAL,0))                C0110_ONBAL,
            SUM(Coalesce(input_df.B2_IRB_EAD_AMT_OFBAL,0))                C0110_OFBAL,
            SUM(Coalesce(input_df.B2_IRB_EAD_AMT_OFBAL,0))                C0120,
            SUM(CASE
                  WHEN input_df.corep_exposure_category IN ('SECURITIES FINANCING','DERIVATIVES')
                  THEN Coalesce(input_df.EAD_POST_CRM_AMT,0)
                  ELSE 0
                  END)                                            C0130,
            SUM(CASE
                  WHEN input_df.ACLM_PRODUCT_TYPE IN ('REPO','BASEL-OTC')
                  THEN Coalesce(input_df.EAD_POST_CRM_AMT,0)
                  ELSE 0
                  END)                                            C0130_REPO_OTC,
            SUM(CASE
                  WHEN input_df.LRFE_UFE_FLAG = 'Y'
                  THEN Coalesce(input_df.EAD_POST_CRM_AMT,0)
                  ELSE 0
                  END)                                            C0140,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_CRM_UFCP_GUAR_AMT,0)
                  ELSE 0
                  END)                                            C0150,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_UFCP_GUAR_AMT,0)
                  ELSE 0
                  END)                                            C0150_ONBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_UFCP_GUAR_AMT,0)
                  ELSE 0
                  END)                                            C0150_OFBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_CRM_UFCP_CRED_DERIV_AMT,0)
                  ELSE 0
                  END)                                            C0160,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_UFCP_CRED_DERIV_AMT,0)
                  ELSE 0
                  END)                                            C0160_ONBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_UFCP_CRED_DERIV_AMT,0)
                  ELSE 0
                  END)                                            C0160_OFBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_OTH_FUNDED_AMT,0)
                  ELSE 0
                  END)                                            C0170,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_OTH_FUNDED_AMT,0)
                  ELSE 0
                  END)                                            C0170_ONBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_OTH_FUNDED_AMT,0)
                  ELSE 0
                  END)                                            C0170_OFBAL,                      
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_CRM_COD_AMT,0)
                  ELSE 0
                  END) as double) as                                            C0171,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_COD_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0171_ONBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_COD_AMT,0)
                  ELSE 0
                  END) as double) as                                         C0171_OFBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_CRM_LIP_AMT,0)
                  ELSE 0
                  END) as double) as                                            C0172,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_LIP_AMT,0)
                  ELSE 0
                  END) as double) as                                            C0172_ONBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_LIP_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0172_OFBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN (  Coalesce(input_df.B2_IRB_CRM_FCP_OTH_FUNDED_AMT,0)
                        - (  Coalesce(input_df.B2_IRB_CRM_COD_AMT,0)
                              + Coalesce(input_df.B2_IRB_CRM_LIP_AMT,0)))
                  ELSE 0
                  END)                                            C0173,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN (  Coalesce(input_df.B2_IRB_CRM_FCP_OTH_FUNDED_AMT,0)
                        - (  Coalesce(input_df.B2_IRB_CRM_COD_AMT,0)
                              + Coalesce(input_df.B2_IRB_CRM_LIP_AMT,0)))
                  ELSE 0
                  END)                                            C0173_ONBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN (  Coalesce(input_df.B2_IRB_CRM_FCP_OTH_FUNDED_AMT,0)
                        - (  Coalesce(input_df.B2_IRB_CRM_COD_AMT,0)
                              + Coalesce(input_df.B2_IRB_CRM_LIP_AMT,0)))
                  ELSE 0
                  END)                                            C0173_OFBAL,                      
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_ELG_FIN_COL_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0180,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_ELG_FIN_COL_AMT,0)
                  ELSE 0
                  END) as double) as                                          C0180_ONBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_ELG_FIN_COL_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0180_OFBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_REAL_ESTATE_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0190,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_REAL_ESTATE_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0190_ONBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_REAL_ESTATE_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0190_OFBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_OTH_PHY_COL_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0200,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_OTH_PHY_COL_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0200_ONBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_OTH_PHY_COL_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0200_OFBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_RECEIVABLES_AMT,0)
                  ELSE 0
                  END) as double) as                                            C0210,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_RECEIVABLES_AMT,0)
                  ELSE 0
                  END) as double) as                                         C0210_ONBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_FCP_RECEIVABLES_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0210_OFBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  THEN Coalesce(input_df.B2_IRB_CRM_UFCP_DOUBLE_DEF_AMT,0)
                  ELSE 0
                  END) as double) as                                            C0220,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_UFCP_DOUBLE_DEF_AMT,0)
                  ELSE 0
                  END) as double) as                                          C0220_ONBAL,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_CRM_UFCP_DOUBLE_DEF_AMT,0)
                  ELSE 0
                  END) as double) as                                          C0220_OFBAL,
            cast(0 as double) as   C0230,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.LRFE_UFE_FLAG,'X') <> 'Y'
                  THEN Coalesce(input_df.EAD_LGD_NUMERATOR,0)
                  ELSE 0
                  END)                                            C0230_NUMERATOR,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.LRFE_UFE_FLAG,'X') <> 'Y'
                  THEN Coalesce(input_df.EAD_POST_CRM_AMT,0)
                  ELSE 0
                  END)                                            C0230_DENOMINATOR,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.LRFE_UFE_FLAG,'X') <> 'Y'
                  THEN Coalesce(input_df.EAD_LGD_NUMERATOR_ON,0)
                  ELSE 0
                  END)                                            C0230_NUMERATOR_ONBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.LRFE_UFE_FLAG,'X') <> 'Y'
                  THEN Coalesce(input_df.B2_IRB_EAD_AMT_ONBAL,0)
                  ELSE 0
                  END)                                            C0230_DENOMINATOR_ONBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.LRFE_UFE_FLAG,'X') <> 'Y'
                  THEN Coalesce(input_df.EAD_LGD_NUMERATOR_OFF,0)
                  ELSE 0
                  END)                                            C0230_NUMERATOR_OFBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.LRFE_UFE_FLAG,'X') <> 'Y'
                  THEN Coalesce(input_df.B2_IRB_EAD_AMT_OFBAL,0)
                  ELSE 0
                  END)                                            C0230_DENOMINATOR_OFBAL,
            cast( 0 as double) as C0240,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.LRFE_UFE_FLAG = 'Y'
                  THEN Coalesce(input_df.EAD_LGD_NUMERATOR,0)
                  ELSE 0
                  END) as double) as                                            C0240_NUMERATOR,
            cast(SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  input_df.LRFE_UFE_FLAG = 'Y'
                  THEN Coalesce(input_df.EAD_POST_CRM_AMT,0)
                  ELSE 0
                  END) as double) as                                           C0240_DENOMINATOR,
            cast( 0 as double) as  C0250,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.REG_EXPOSURE_TYPE,'X') NOT IN ('Retail - Secured by immovable property SME',
                                                            'Retail - Secured by immovable property non-SME',
                                                            'Retail - Qualifying revolving',
                                                            'Retail - Other SME',
                                                            'Retail - Other non-SME')
                  THEN Coalesce(input_df.EAD_MAT_YEARS_NUMERATOR,0) * 365
                  ELSE 0
                  END)                                            C0250_NUMERATOR,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.REG_EXPOSURE_TYPE,'X') NOT IN ('Retail - Secured by immovable property SME',
                                                            'Retail - Secured by immovable property non-SME',
                                                            'Retail - Qualifying revolving',
                                                            'Retail - Other SME',
                                                            'Retail - Other non-SME')
                  THEN Coalesce(input_df.EAD_POST_CRM_AMT,0)
                  ELSE 0
                  END)                                            C0250_DENOMINATOR,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.REG_EXPOSURE_TYPE,'X') NOT IN ('Retail - Secured by immovable property SME',
                                                            'Retail - Secured by immovable property non-SME',
                                                            'Retail - Qualifying revolving',
                                                            'Retail - Other SME',
                                                            'Retail - Other non-SME')
                  THEN Coalesce(input_df.EAD_MAT_YEARS_NUMERATOR_ON,0) * 365
                  ELSE 0
                  END)                                            C0250_NUMERATOR_ONBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.REG_EXPOSURE_TYPE,'X') NOT IN ('Retail - Secured by immovable property SME',
                                                            'Retail - Secured by immovable property non-SME',
                                                            'Retail - Qualifying revolving',
                                                            'Retail - Other SME',
                                                            'Retail - Other non-SME')
                  THEN Coalesce(input_df.B2_IRB_EAD_AMT_ONBAL,0)
                  ELSE 0
                  END)                                            C0250_DENOMINATOR_ONBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.REG_EXPOSURE_TYPE,'X') NOT IN ('Retail - Secured by immovable property SME',
                                                            'Retail - Secured by immovable property non-SME',
                                                            'Retail - Qualifying revolving',
                                                            'Retail - Other SME',
                                                            'Retail - Other non-SME')
                  THEN Coalesce(input_df.EAD_MAT_YEARS_NUMERATOR_OFF,0) * 365
                  ELSE 0
                  END)                                            C0250_NUMERATOR_OFBAL,
            SUM(CASE
                  WHEN Coalesce(input_df.RWA_CALC_METHOD,'X') <> 'AIRB - SL Slotting Approach'
                  AND  Coalesce(input_df.REG_EXPOSURE_TYPE,'X') NOT IN ('Retail - Secured by immovable property SME',
                                                            'Retail - Secured by immovable property non-SME',
                                                            'Retail - Qualifying revolving',
                                                            'Retail - Other SME',
                                                            'Retail - Other non-SME')
                  THEN Coalesce(input_df.B2_IRB_EAD_AMT_OFBAL,0)
                  ELSE 0
                  END)                                            C0250_DENOMINATOR_OFBAL,
            cast(SUM(Coalesce(input_df.RWA_POST_CRM_PRE_SPRT_AMOUNT,0)) as double) as       C0255,
            cast(SUM(Coalesce(input_df.B2_IRB_RWA_PRE_SPRT_AMT_ONBAL,0)) as double) as       C0255_ONBAL,
            cast(SUM(Coalesce(input_df.B2_IRB_RWA_PRE_SPRT_AMT_OFBAL,0)) as double) as       C0255_OFBAL,                     
            SUM(CASE
                  WHEN input_df.B3_SME_DISCOUNT_FLAG = 'Y'
                  THEN (  Coalesce(input_df.RWA_POST_CRM_AMOUNT,0)
                        - Coalesce(input_df.RWA_POST_CRM_PRE_SPRT_AMOUNT,0))
                  ELSE 0
                  END)                                            C0256,
            cast(SUM(CASE
                  WHEN input_df.B3_SME_DISCOUNT_FLAG = 'Y'
                  THEN (  Coalesce(input_df.B2_IRB_RWA_AMT_ONBAL,0)
                        - Coalesce(input_df.B2_IRB_RWA_PRE_SPRT_AMT_ONBAL,0))
                  ELSE 0
                  END) as double) as                                           C0256_ONBAL,
            cast(SUM(CASE
                  WHEN input_df.B3_SME_DISCOUNT_FLAG = 'Y'
                  THEN (  Coalesce(input_df.B2_IRB_RWA_AMT_OFBAL,0)
                        - Coalesce(input_df.B2_IRB_RWA_PRE_SPRT_AMT_OFBAL,0))
                  ELSE 0
                  END) as double) as                                           C0256_OFBAL,
            SUM(CASE
                  WHEN input_df.CRR2_501A_DISCOUNT_FLAG = 'Y'
                  THEN (  Coalesce(input_df.RWA_POST_CRM_AMOUNT,0)
                        - Coalesce(input_df.RWA_POST_CRM_PRE_SPRT_AMOUNT,0))
                  ELSE 0
                  END)                                            C0257,
            cast(SUM(CASE
                  WHEN input_df.CRR2_501A_DISCOUNT_FLAG = 'Y'
                  THEN (  Coalesce(input_df.B2_IRB_RWA_AMT_ONBAL,0)
                        - Coalesce(input_df.B2_IRB_RWA_PRE_SPRT_AMT_ONBAL,0))
                  ELSE 0
                  END) as double) as                                            C0257_ONBAL,
            cast(SUM(CASE
                  WHEN input_df.CRR2_501A_DISCOUNT_FLAG = 'Y'
                  THEN (  Coalesce(input_df.B2_IRB_RWA_AMT_OFBAL,0)
                        - Coalesce(input_df.B2_IRB_RWA_PRE_SPRT_AMT_OFBAL,0))
                  ELSE 0
                  END) as double) as                                           C0257_OFBAL,                      
            cast(SUM(Coalesce(input_df.RWA_POST_CRM_AMOUNT,0)) as double) as                C0260,
            cast(SUM(Coalesce(input_df.B2_IRB_RWA_AMT_ONBAL,0)) as double) as              C0260_ONBAL,
            cast(SUM(Coalesce(input_df.B2_IRB_RWA_AMT_OFBAL,0)) as double) as               C0260_OFBAL,
            SUM(CASE
                  WHEN input_df.LRFE_UFE_FLAG = 'Y'
                  THEN Coalesce(input_df.RWA_POST_CRM_AMOUNT,0)
                  ELSE 0
                  END)                                            C0270,
            cast(SUM(Coalesce(input_df.B2_APP_EXPECTED_LOSS_AMT,0))  as double) as          C0280,
            cast(SUM(Coalesce(input_df.B2_IRB_EL_AMT_ONBAL,0)) as double) as                C0280_ONBAL,
            cast(SUM(Coalesce(input_df.B2_IRB_EL_AMT_OFBAL,0)) as double) as                 C0280_OFBAL,
            cast(SUM(Coalesce(input_df.B2_IRB_PROVISIONS_AMT,0)) * -1 as double) as        C0290,  
            cast(SUM(CASE
                  WHEN input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_PROVISIONS_AMT,0)
                  ELSE 0
                  END) * -1 as double) as                                       C0290_ONBAL, 
            cast(SUM(CASE
                  WHEN input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.B2_IRB_PROVISIONS_AMT,0)
                  ELSE 0
                  END) * -1  as double) as                                    C0290_OFBAL,  
            cast(SUM(CASE
                  WHEN input_df.OBLIGOR_TYPE = 'RETAIL'
                  THEN Coalesce(input_df.RETAIL_OBLIGOR_COUNT,0)
                  ELSE 0
                  END) as double) as                                            C0300,
            cast(SUM(CASE
                  WHEN input_df.OBLIGOR_TYPE = 'RETAIL'
                  AND  input_df.corep_exposure_category = 'ON BALANCE SHEET'
                  THEN Coalesce(input_df.RETAIL_OBLIGOR_COUNT,0)
                  ELSE 0
                  END) as double) as                                           C0300_ONBAL,
            cast(SUM(CASE
                  WHEN input_df.OBLIGOR_TYPE = 'RETAIL'
                  AND  input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                  THEN Coalesce(input_df.RETAIL_OBLIGOR_COUNT,0)
                  ELSE 0
                  END) as double) as                                           C0300_OFBAL,
            SUM(COALESCE(input_df.B2_IRB_RWA_PRE_CDS,
                        input_df.RWA_POST_CRM_AMOUNT,
                        0))                                    C0310,
            CASE input_df.REG_EXPOSURE_TYPE
            WHEN 'Central governments and central banks'
            THEN 'AIRB0003'
            WHEN 'Institutions'
            THEN 'AIRB0005'
            WHEN 'Corporates - SME'
            THEN 'AIRB0007'
            WHEN 'Corporates - Specialised Lending'
            THEN 'AIRB0009'
            WHEN 'Corporates - Other'
            THEN 'AIRB0011'
            WHEN 'Retail - Secured by immovable property SME'
            THEN 'AIRB0013'
            WHEN 'Retail - Secured by immovable property non-SME'
            THEN 'AIRB0014'
            WHEN 'Retail - Qualifying revolving'
            THEN 'AIRB0015'
            WHEN 'Retail - Other SME'
            THEN 'AIRB0016'
            WHEN 'Retail - Other non-SME'
            THEN 'AIRB0017'
            END  SHEET_ID,
            input_df.YEAR_MONTH,
            input_df.REPORTING_REGULATOR_CODE,
            input_df.RISK_TAKER_RRU,
            input_df.RISK_ON_RRU,
            input_df.INTERNAL_TRANSACTION_FLAG,
            input_df.RWA_CALC_METHOD,
            input_df.B3_SME_DISCOUNT_FLAG,
            input_df.CRR2_501A_DISCOUNT_FLAG,
            input_df.corep_exposure_category as corep_exposure_category,
            input_df.REPORTING_TYPE_CODE,
            input_df.MATURITY_BAND_DESC,
            {p_run_rk}     RUN_RK,
            {v_return_rk}  RETURN_RK,
            "{v_return_code}"  RETURN_CODE,
            {v_template_rk}  TEMPLATE_RK,
            'NULL'         FOR_ADJUST_FLAG
      FROM  input_df_view_C_08_01_3_0_temp_df input_df
      GROUP BY input_df.YEAR_MONTH,
            input_df.REPORTING_REGULATOR_CODE,
            input_df.RISK_TAKER_RRU,
            input_df.RISK_ON_RRU,
            input_df.INTERNAL_TRANSACTION_FLAG,
            input_df.REG_EXPOSURE_TYPE,
            input_df.RWA_CALC_METHOD,
            input_df.B3_SME_DISCOUNT_FLAG,
            input_df.CRR2_501A_DISCOUNT_FLAG, 
            input_df.corep_exposure_category,
            input_df.REPORTING_TYPE_CODE,    
            input_df.MATURITY_BAND_DESC
            --input_df.deal_id
    '''
    
    C_08_01_3_0_temp_df= spark.sql(query).persist(StorageLevel.MEMORY_AND_DISK_SER)
    
    return C_08_01_3_0_temp_df

###################################################################################################################
#############    This function is called inside create_C_08_01_df5 and create_C_08_01_df6 function  ###############
###################################################################################################################	
def INT_C_08_01_DF1(C_08_01_3_0_temp_df,srtd_mart_db):
    
    df = C_08_01_3_0_temp_df
    
    df1 = df.select('YEAR_MONTH', 'RETURN_RK', 'RETURN_CODE', 'TEMPLATE_RK', 'RUN_RK', 'REPORTING_REGULATOR_CODE',
               'RISK_TAKER_RRU', 'RISK_ON_RRU', 'INTERNAL_TRANSACTION_FLAG', 'SHEET_ID').distinct()
    
    df2 = df.select('YEAR_MONTH', 'RETURN_RK', 'RETURN_CODE', 'TEMPLATE_RK', 'RUN_RK', 'REPORTING_REGULATOR_CODE',
               'RISK_TAKER_RRU', 'RISK_ON_RRU', 'INTERNAL_TRANSACTION_FLAG').withColumn("SHEET_ID",lit("AIRB0001")).distinct();
    
    INT_C_08_01_DF1 = df1.union(df2) 
    
    return INT_C_08_01_DF1

###################################################################################################################
############# This function is called inside INT_C_08_01_DF2 function and used to implement unpivot logic  ########
###################################################################################################################
def unpivot_C_08_01_df1(spark, C_08_01_3_0_temp_df):
    
    unpivot_col="stack(32,'C0010', C0010, 'C0020', C0020, 'C0030', C0030, 'C0090', C0090, 'C0100', C0100, 'C0110', C0110, \
    'C0120', C0120, 'C0130', C0130, 'C0140', C0140, 'C0150', C0150, 'C0160', C0160, 'C0170', C0170, 'C0171', C0171, \
    'C0172', C0172, 'C0173', C0173, 'C0180', C0180, 'C0190', C0190, 'C0200', C0200, 'C0210', C0210, 'C0220', C0220, \
    'C0230', C0230, 'C0240', C0240, 'C0250', C0250, 'C0255', C0255, 'C0256', C0256, 'C0257', C0257, 'C0260', C0260, \
    'C0270', C0270, 'C0280', C0280, 'C0290', C0290, 'C0300', C0300, 'C0310', C0310)  as (column_id,value)"
    
    unpivot_df=C_08_01_3_0_temp_df.select("year_month","return_rk","return_code","reporting_regulator_code","sheet_id","for_Adjust_flag","corep_exposure_category","C0010_NUMERATOR","C0230_NUMERATOR","C0240_NUMERATOR","C0250_NUMERATOR","C0010_DENOMINATOR","C0230_DENOMINATOR","C0240_DENOMINATOR","C0250_DENOMINATOR","risk_taker_rru","risk_on_rru","internal_transaction_flag","run_rk",expr(unpivot_col))
    
    unpivot_df.createOrReplaceTempView("INT_AGG2")
    
    query=f'''SELECT YEAR_MONTH,
            RETURN_RK,
            RETURN_CODE,
         'R0010' ROW_ID,
         COLUMN_ID,
         REPORTING_REGULATOR_CODE,
         SHEET_ID,
         CASE
            WHEN     COLUMN_ID = 'C0250'
                 AND SHEET_ID IN ('AIRB0013',
                                  'AIRB0014',
                                  'AIRB0015',
                                  'AIRB0016',
                                  'AIRB0017')
            THEN
               'N'
            ELSE
               NULL
         END
            APPL_DATA_POINT_FLAG,
         FOR_ADJUST_FLAG,
         SUM (
            CASE
               WHEN COLUMN_ID = 'C0310'
               THEN
                  CASE
                     WHEN A.corep_exposure_category IN ('SECURITIES FINANCING',
                                                     'DERIVATIVES')
                     THEN
                        VALUE
                     ELSE
                        0
                  END
               ELSE
                  VALUE
            END)
            VALUE,
         CASE
            WHEN COLUMN_ID = 'C0010' THEN (SUM (C0010_NUMERATOR))
            WHEN COLUMN_ID = 'C0230' THEN (SUM (C0230_NUMERATOR))
            WHEN COLUMN_ID = 'C0240' THEN (SUM (C0240_NUMERATOR))
            WHEN COLUMN_ID = 'C0250' THEN (SUM (C0250_NUMERATOR))
            ELSE NULL
         END
            VALUE_NUMERATOR,
         CASE
            WHEN (COLUMN_ID = 'C0010') THEN (SUM (C0010_DENOMINATOR))
            WHEN (COLUMN_ID = 'C0230') THEN (SUM (C0230_DENOMINATOR))
            WHEN (COLUMN_ID = 'C0240') THEN (SUM (C0240_DENOMINATOR))
            WHEN (COLUMN_ID = 'C0250') THEN (SUM (C0250_DENOMINATOR))
            ELSE NULL
         END
            VALUE_DENOMINATOR,
         RISK_TAKER_RRU,
         RISK_ON_RRU,
         INTERNAL_TRANSACTION_FLAG,
         RUN_RK
    FROM INT_AGG2
    GROUP BY YEAR_MONTH,
             RETURN_RK,
             RETURN_CODE,
             COLUMN_ID,
             REPORTING_REGULATOR_CODE,
             SHEET_ID,
             FOR_ADJUST_FLAG,
             RISK_TAKER_RRU,
             RISK_ON_RRU,
             INTERNAL_TRANSACTION_FLAG,
             RUN_RK'''
    
    unpivoted_C_08_01_df1= spark.sql(query)
   # unpivoted_C_08_01_df1=unpivoted_C_08_01_df1.select("year_month","return_rk","return_code","row_id","reporting_regulator_code",
    #"sheet_id","appl_data_point_flag","for_Adjust_flag","value_numerator","value_denominator","risk_taker_rru","risk_on_rru","internal_transaction_flag","run_rk",expr(unpivot_col))
    
    print("first unpivot logic")
    #unpivoted_C_08_01_df1.write.format("parquet").mode("overwrite").saveAsTable(srtd_mart_db + '.' + 'FIRST_UNPIVOT_C801')
    return unpivoted_C_08_01_df1

###################################################################################################################
############# This function is called inside INT_C_08_01_DF2 function and used to implement unpivot logic  ########
###################################################################################################################	
def unpivot_C_08_01_df2(spark,C_08_01_3_0_temp_df):
    
    unpivot_col="stack(31,'C0010', C0010, 'C0020', C0020, 'C0030', C0030, 'C0090', C0090, 'C0100', C0100, 'C0110', C0110, \
    'C0120', C0120, 'C0130', C0130, 'C0140', C0140, 'C0150', C0150, 'C0160', C0160, 'C0170', C0170, 'C0171', C0171, \
    'C0172', C0172, 'C0173', C0173, 'C0180', C0180, 'C0190', C0190, 'C0200', C0200, 'C0210', C0210, 'C0220', C0220, \
    'C0230', C0230, 'C0240', C0240, 'C0250', C0250, 'C0255', C0255, 'C0256', C0256, 'C0257', C0257, 'C0260', C0260, \
    'C0270', C0270, 'C0280', C0280, 'C0290', C0290, 'C0300', C0300 )  as (column_id,value)"
    
    #unpivot_df=C_08_01_3_0_temp_df.select("deal_id",expr(unpivot_col))
    unpivot_df=C_08_01_3_0_temp_df.select("year_month","return_rk","return_code","reporting_regulator_code","sheet_id","for_Adjust_flag","corep_exposure_category","C0010_NUMERATOR","C0230_NUMERATOR","C0240_NUMERATOR","C0250_NUMERATOR","C0010_DENOMINATOR","C0230_DENOMINATOR","C0240_DENOMINATOR","C0250_DENOMINATOR","risk_taker_rru","risk_on_rru","internal_transaction_flag","run_rk","B3_SME_DISCOUNT_FLAG",expr(unpivot_col))
    int_agg2 = unpivot_df.filter("B3_SME_DISCOUNT_FLAG = 'Y'")
                 
    print("\n\nTotal records in int_agg2 : ", int_agg2.count());
    print("\n\n");
   
    int_agg2.createOrReplaceTempView("INT_AGG2")  	
    #unpivot_df.createOrReplaceTempView("INT_AGG2")
    
    query=f'''SELECT  YEAR_MONTH
                  ,RETURN_RK
                  ,RETURN_CODE
                  ,'R0015'  ROW_ID
                  ,COLUMN_ID
                  ,REPORTING_REGULATOR_CODE
                  ,SHEET_ID
                  ,CASE
                     WHEN COLUMN_ID = 'C0250'
                      AND SHEET_ID IN ('AIRB0013',
                                       'AIRB0014',
                                       'AIRB0015',
                                       'AIRB0016',
                                       'AIRB0017')
                     THEN 'N'
                     ELSE NULL
                   END  APPL_DATA_POINT_FLAG
                  ,FOR_ADJUST_FLAG
                  ,SUM(VALUE)  VALUE
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_NUMERATOR) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_NUMERATOR) )
                     WHEN COLUMN_ID = 'C0240'
                     THEN ( SUM(C0240_NUMERATOR) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_NUMERATOR) )
                     ELSE NULL
                   END  VALUE_NUMERATOR
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_DENOMINATOR) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_DENOMINATOR) )
                     WHEN COLUMN_ID = 'C0240'
                     THEN ( SUM(C0240_DENOMINATOR) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_DENOMINATOR) )
                     ELSE NULL
                   END  VALUE_DENOMINATOR
                  ,RISK_TAKER_RRU
                  ,RISK_ON_RRU
                  ,INTERNAL_TRANSACTION_FLAG
                  ,RUN_RK
            FROM INT_AGG2
            GROUP BY YEAR_MONTH, RETURN_RK, RETURN_CODE, COLUMN_ID, REPORTING_REGULATOR_CODE,
                     SHEET_ID, FOR_ADJUST_FLAG, RISK_TAKER_RRU, RISK_ON_RRU, INTERNAL_TRANSACTION_FLAG, RUN_RK'''
    
    unpivoted_C_08_01_df2= spark.sql(query)
    
    return unpivoted_C_08_01_df2

###################################################################################################################
############# This function is called inside INT_C_08_01_DF2 function and used to implement unpivot logic  ########
###################################################################################################################	
def unpivot_C_08_01_df3(spark,C_08_01_3_0_temp_df):
    
    unpivot_col="stack(31,'C0010', C0010, 'C0020', C0020, 'C0030', C0030, 'C0090', C0090, 'C0100', C0100, 'C0110', C0110, \
    'C0120', C0120, 'C0130', C0130, 'C0140', C0140, 'C0150', C0150, 'C0160', C0160, 'C0170', C0170, 'C0171', C0171, \
    'C0172', C0172, 'C0173', C0173, 'C0180', C0180, 'C0190', C0190, 'C0200', C0200, 'C0210', C0210, 'C0220', C0220, \
    'C0230', C0230, 'C0240', C0240, 'C0250', C0250, 'C0255', C0255, 'C0256', C0256, 'C0257', C0257, 'C0260', C0260, \
    'C0270', C0270, 'C0280', C0280, 'C0290', C0290, 'C0300', C0300 )  as (column_id,value)"
    
    #unpivot_df=C_08_01_3_0_temp_df.select("deal_id",expr(unpivot_col))
    unpivot_df=C_08_01_3_0_temp_df.select("year_month","return_rk","return_code","reporting_regulator_code","sheet_id","for_Adjust_flag","corep_exposure_category","C0010_NUMERATOR","C0230_NUMERATOR","C0240_NUMERATOR","C0250_NUMERATOR","C0010_DENOMINATOR","C0230_DENOMINATOR","C0240_DENOMINATOR","C0250_DENOMINATOR","risk_taker_rru","risk_on_rru","internal_transaction_flag","run_rk","CRR2_501A_DISCOUNT_FLAG",expr(unpivot_col))
    # unpivot_df=C_08_01_3_0_temp_df.select("year_month","return_rk","return_code","reporting_regulator_code","sheet_id","for_Adjust_flag","corep_exposure_category","C0010_NUMERATOR_ONBAL","C0230_NUMERATOR_ONBAL","C0250_NUMERATOR_ONBAL","C0010_DENOMINATOR_ONBAL","C0230_DENOMINATOR_ONBAL","C0250_DENOMINATOR_ONBAL","risk_taker_rru","risk_on_rru","internal_transaction_flag","run_rk","REPORTING_TYPE_CODE",expr(unpivot_col))
    int_agg2 = unpivot_df.filter("CRR2_501A_DISCOUNT_FLAG = 'Y'")
                 
    print("\n\nTotal records in int_agg2 : ", int_agg2.count());
    print("\n\n");
   
    int_agg2.createOrReplaceTempView("INT_AGG2")   
    query=f'''SELECT  YEAR_MONTH
                  ,RETURN_RK
                  ,RETURN_CODE
                  ,'R0016'  ROW_ID
                  ,COLUMN_ID
                  ,REPORTING_REGULATOR_CODE
                  ,SHEET_ID
                  ,CASE
                     WHEN COLUMN_ID = 'C0250'
                      AND SHEET_ID IN ('AIRB0013',
                                       'AIRB0014',
                                       'AIRB0015',
                                       'AIRB0016',
                                       'AIRB0017')
                     THEN 'N'
                     ELSE NULL
                   END  APPL_DATA_POINT_FLAG
                  ,FOR_ADJUST_FLAG
                  ,SUM(VALUE)  VALUE
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_NUMERATOR) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_NUMERATOR) )
                     WHEN COLUMN_ID = 'C0240'
                     THEN ( SUM(C0240_NUMERATOR) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_NUMERATOR) )
                     ELSE NULL
                   END  VALUE_NUMERATOR
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_DENOMINATOR) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_DENOMINATOR) )
                     WHEN COLUMN_ID = 'C0240'
                     THEN ( SUM(C0240_DENOMINATOR) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_DENOMINATOR) )
                     ELSE NULL
                   END  VALUE_DENOMINATOR
                  ,RISK_TAKER_RRU
                  ,RISK_ON_RRU
                  ,INTERNAL_TRANSACTION_FLAG
                  ,RUN_RK
            FROM INT_AGG2          
            GROUP BY YEAR_MONTH, RETURN_RK, RETURN_CODE, COLUMN_ID, REPORTING_REGULATOR_CODE,
                     SHEET_ID, FOR_ADJUST_FLAG, RISK_TAKER_RRU, RISK_ON_RRU, INTERNAL_TRANSACTION_FLAG, RUN_RK'''
    
    unpivoted_C_08_01_df3= spark.sql(query)
    
    return unpivoted_C_08_01_df3

###################################################################################################################
############# This function is called inside INT_C_08_01_DF2 function and used to implement unpivot logic  ########
###################################################################################################################	
def unpivot_C_08_01_df4(spark,C_08_01_3_0_temp_df):
    
    unpivot_col="stack(24,'C0010', C0010, 'C0020_ONBAL', C0020_ONBAL, 'C0090_ONBAL', C0090_ONBAL, \
    'C0110_ONBAL', C0110_ONBAL, 'C0150_ONBAL', C0150_ONBAL, 'C0160_ONBAL', C0160_ONBAL, 'C0170_ONBAL', C0170_ONBAL, \
    'C0171_ONBAL', C0171_ONBAL, 'C0172_ONBAL', C0172_ONBAL, 'C0173_ONBAL', C0173_ONBAL, 'C0180_ONBAL', C0180_ONBAL, \
    'C0190_ONBAL', C0190_ONBAL, 'C0200_ONBAL', C0200_ONBAL, 'C0210_ONBAL', C0210_ONBAL, 'C0220_ONBAL', C0220_ONBAL, \
    'C0230', C0230, 'C0250', C0250, 'C0255_ONBAL', C0255_ONBAL, 'C0256_ONBAL', C0256_ONBAL, \
    'C0257_ONBAL', C0257_ONBAL, 'C0260_ONBAL', C0260_ONBAL, 'C0280_ONBAL', C0280_ONBAL, 'C0290_ONBAL', C0290_ONBAL, \
    'C0300_ONBAL', C0300_ONBAL)  as (column_id,value)"
    
    #unpivot_df=C_08_01_3_0_temp_df.select("deal_id",expr(unpivot_col))
    unpivot_df=C_08_01_3_0_temp_df.select("year_month","return_rk","return_code","reporting_regulator_code","sheet_id","for_Adjust_flag","corep_exposure_category","C0010_NUMERATOR_ONBAL","C0230_NUMERATOR_ONBAL","C0250_NUMERATOR_ONBAL","C0010_DENOMINATOR_ONBAL","C0230_DENOMINATOR_ONBAL","C0250_DENOMINATOR_ONBAL","risk_taker_rru","risk_on_rru","internal_transaction_flag","run_rk",expr(unpivot_col))

    unpivot_df.createOrReplaceTempView("INT_AGG2")
    
    query=f'''SELECT  YEAR_MONTH
                  ,RETURN_RK
                  ,RETURN_CODE
                  ,'R0020'  ROW_ID
                  ,Coalesce(substring(COLUMN_ID,1,5),0)  COLUMN_ID
                  ,REPORTING_REGULATOR_CODE
                  ,SHEET_ID
                  ,CASE
                     WHEN COLUMN_ID = 'C0250'
                      AND SHEET_ID IN ('AIRB0013',
                                       'AIRB0014',
                                       'AIRB0015',
                                       'AIRB0016',
                                       'AIRB0017')
                     THEN 'N'
                     ELSE NULL
                   END  APPL_DATA_POINT_FLAG
                  ,FOR_ADJUST_FLAG
                  ,SUM(VALUE)  VALUE
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_NUMERATOR_ONBAL) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_NUMERATOR_ONBAL) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_NUMERATOR_ONBAL) )
                     ELSE NULL
                   END  VALUE_NUMERATOR
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_DENOMINATOR_ONBAL) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_DENOMINATOR_ONBAL) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_DENOMINATOR_ONBAL) )
                     ELSE NULL
                   END  VALUE_DENOMINATOR
                  ,RISK_TAKER_RRU
                  ,RISK_ON_RRU
                  ,INTERNAL_TRANSACTION_FLAG
                  ,RUN_RK
            FROM INT_AGG2                  
            GROUP BY YEAR_MONTH, RETURN_RK, RETURN_CODE, COLUMN_ID, REPORTING_REGULATOR_CODE,
                     SHEET_ID, FOR_ADJUST_FLAG, RISK_TAKER_RRU, RISK_ON_RRU, INTERNAL_TRANSACTION_FLAG, RUN_RK'''
    
    unpivoted_C_08_01_df4= spark.sql(query)
    
    return unpivoted_C_08_01_df4

###################################################################################################################
############# This function is called inside INT_C_08_01_DF2 function and used to implement unpivot logic  ########
###################################################################################################################	
def unpivot_C_08_01_df5(spark,C_08_01_3_0_temp_df):
    
    
    unpivot_col="stack(24,'C0010', C0010, 'C0020_OFBAL', C0020_OFBAL, 'C0090_OFBAL', C0090_OFBAL, \
    'C0110_OFBAL', C0110_OFBAL, 'C0150_OFBAL', C0150_OFBAL, 'C0160_OFBAL', C0160_OFBAL, 'C0170_OFBAL', C0170_OFBAL, \
    'C0171_OFBAL', C0171_OFBAL, 'C0172_OFBAL', C0172_OFBAL, 'C0173_OFBAL', C0173_OFBAL, 'C0180_OFBAL', C0180_OFBAL, \
    'C0190_OFBAL', C0190_OFBAL, 'C0200_OFBAL', C0200_OFBAL, 'C0210_OFBAL', C0210_OFBAL, 'C0220_OFBAL', C0220_OFBAL, \
    'C0230', C0230, 'C0250', C0250, 'C0255_OFBAL', C0255_OFBAL, 'C0256_OFBAL', C0256_OFBAL, \
    'C0257_OFBAL', C0257_OFBAL, 'C0260_OFBAL', C0260_OFBAL, 'C0280_OFBAL', C0280_OFBAL, 'C0290_OFBAL', C0290_OFBAL, \
    'C0300_OFBAL', C0300_OFBAL)  as (column_id,value)"
    
    #unpivot_df=C_08_01_3_0_temp_df.select("deal_id",expr(unpivot_col))
    unpivot_df=C_08_01_3_0_temp_df.select("year_month","return_rk","return_code","reporting_regulator_code","sheet_id","for_Adjust_flag","corep_exposure_category","C0010_NUMERATOR_OFBAL","C0230_NUMERATOR_OFBAL","C0250_NUMERATOR_OFBAL","C0010_DENOMINATOR_OFBAL","C0230_DENOMINATOR_OFBAL","C0250_DENOMINATOR_OFBAL","risk_taker_rru","risk_on_rru","internal_transaction_flag","run_rk",expr(unpivot_col))

    unpivot_df.createOrReplaceTempView("INT_AGG2")
    
    query=f'''SELECT  YEAR_MONTH
                  ,RETURN_RK
                  ,RETURN_CODE
                  ,'R0030'  ROW_ID
                  ,Coalesce(substring(COLUMN_ID,1,5),0)  COLUMN_ID
                  ,REPORTING_REGULATOR_CODE
                  ,SHEET_ID
                  ,CASE
                     WHEN COLUMN_ID = 'C0250'
                      AND SHEET_ID IN ('AIRB0013',
                                       'AIRB0014',
                                       'AIRB0015',
                                       'AIRB0016',
                                       'AIRB0017')
                     THEN 'N'
                     ELSE NULL
                   END  APPL_DATA_POINT_FLAG
                  ,FOR_ADJUST_FLAG
                  ,SUM(VALUE)  VALUE
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_NUMERATOR_OFBAL) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_NUMERATOR_OFBAL) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_NUMERATOR_OFBAL) )
                     ELSE NULL
                   END  VALUE_NUMERATOR
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_DENOMINATOR_OFBAL) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_DENOMINATOR_OFBAL) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_DENOMINATOR_OFBAL) )
                     ELSE NULL
                   END  VALUE_DENOMINATOR
                  ,RISK_TAKER_RRU
                  ,RISK_ON_RRU
                  ,INTERNAL_TRANSACTION_FLAG
                  ,RUN_RK
            FROM INT_AGG2                
            GROUP BY YEAR_MONTH, RETURN_RK, RETURN_CODE, COLUMN_ID, REPORTING_REGULATOR_CODE,
                     SHEET_ID, FOR_ADJUST_FLAG, RISK_TAKER_RRU, RISK_ON_RRU, INTERNAL_TRANSACTION_FLAG, RUN_RK'''
    
    unpivoted_C_08_01_df5= spark.sql(query)
    
    return unpivoted_C_08_01_df5

###################################################################################################################
############# This function is called inside INT_C_08_01_DF2 function and used to implement unpivot logic  ########
###################################################################################################################	
def unpivot_C_08_01_df6(spark,C_08_01_3_0_temp_df):
    
    
    unpivot_col="stack(23,'C0010', C0010, 'C0110', C0110, 'C0150', C0150, 'C0160', C0160, 'C0170', C0170, 'C0171', C0171, \
    'C0172', C0172, 'C0173', C0173, 'C0180', C0180, 'C0190', C0190, 'C0200', C0200, 'C0210', C0210, 'C0220', C0220, \
    'C0230', C0230, 'C0250', C0250, 'C0255', C0255, 'C0256', C0256, 'C0257', C0257, 'C0260', C0260, 'C0280', C0280, \
    'C0290', C0290, 'C0300', C0300, 'C0310', C0310)  as (column_id,value)"
    
    #unpivot_df=C_08_01_3_0_temp_df.select("deal_id",expr(unpivot_col))
    unpivot_df=C_08_01_3_0_temp_df.select("year_month","return_rk","return_code","reporting_regulator_code","sheet_id","for_Adjust_flag","corep_exposure_category","C0010_NUMERATOR","C0230_NUMERATOR","C0250_NUMERATOR","C0010_DENOMINATOR","C0230_DENOMINATOR","C0250_DENOMINATOR","risk_taker_rru","risk_on_rru","internal_transaction_flag","run_rk","REPORTING_TYPE_CODE",expr(unpivot_col))
    #int_agg2 = unpivot_df.filter("corep_exposure_category = 'SECURITIES FINANCING' AND COALESCE(REPORTING_TYPE_CODE,'X') NOT IN 'LS')  OR (corep_exposure_category = 'DERIVATIVES' OR REPORTING_TYPE_CODE = 'LS')")
    int_agg2 = unpivot_df.filter("(((COREP_EXPOSURE_CATEGORY = 'SECURITIES FINANCING') and (REPORTING_TYPE_CODE not in ('LS'))) and ((COREP_EXPOSURE_CATEGORY = 'DERIVATIVES') OR (REPORTING_TYPE_CODE not in ('LS'))))")             
    print("\n\nTotal records in int_agg2 : ", int_agg2.count());
    print("\n\n");
       
    int_agg2.createOrReplaceTempView("INT_AGG2")
    #unpivot_df.createOrReplaceTempView("INT_AGG2")
    
    query=f'''SELECT  YEAR_MONTH
                  ,RETURN_RK
                  ,RETURN_CODE
                  ,CASE
                     WHEN corep_exposure_category = 'SECURITIES FINANCING'
                      AND COALESCE(REPORTING_TYPE_CODE,'X') <> 'LS'
                     THEN 'R0040'
                     WHEN (   corep_exposure_category = 'DERIVATIVES'
                           OR REPORTING_TYPE_CODE = 'LS')
                     THEN 'R0050'
                   END  ROW_ID
                  ,COLUMN_ID
                  ,REPORTING_REGULATOR_CODE
                  ,SHEET_ID
                  ,CASE
                     WHEN COLUMN_ID = 'C0250'
                      AND SHEET_ID IN ('AIRB0013',
                                       'AIRB0014',
                                       'AIRB0015',
                                       'AIRB0016',
                                       'AIRB0017')
                     THEN 'N'
                     ELSE NULL
                   END  APPL_DATA_POINT_FLAG
                  ,FOR_ADJUST_FLAG
                  ,SUM(VALUE)  VALUE
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_NUMERATOR) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_NUMERATOR) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_NUMERATOR) )
                     ELSE NULL
                   END  VALUE_NUMERATOR
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_DENOMINATOR) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_DENOMINATOR) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_DENOMINATOR) )
                     ELSE NULL
                   END  VALUE_DENOMINATOR
                  ,RISK_TAKER_RRU
                  ,RISK_ON_RRU
                  ,INTERNAL_TRANSACTION_FLAG
                  ,RUN_RK
            FROM INT_AGG2
            GROUP BY YEAR_MONTH, RETURN_RK, RETURN_CODE,
                     COREP_EXPOSURE_CATEGORY,REPORTING_TYPE_CODE,
                     COLUMN_ID, REPORTING_REGULATOR_CODE,
                     SHEET_ID, FOR_ADJUST_FLAG, RISK_TAKER_RRU, RISK_ON_RRU, INTERNAL_TRANSACTION_FLAG, RUN_RK'''
    
    unpivoted_C_08_01_df6= spark.sql(query)
    
    return unpivoted_C_08_01_df6

###################################################################################################################
############# This function is called inside INT_C_08_01_DF2 function and used to implement unpivot logic  ########
###################################################################################################################	
def unpivot_C_08_01_df7(spark,C_08_01_3_0_temp_df):
    

    unpivot_col="stack(31,'C0010', C0010, 'C0020', C0020, 'C0030', C0030, 'C0090', C0090, 'C0100', C0100, 'C0110', C0110, \
    'C0120', C0120, 'C0130_REPO_OTC', C0130_REPO_OTC, 'C0140', C0140, 'C0150', C0150, 'C0160', C0160, 'C0170', C0170, \
    'C0171', C0171, 'C0172', C0172, 'C0173', C0173, 'C0180', C0180, 'C0190', C0190, 'C0200', C0200, 'C0210', C0210, \
    'C0220', C0220, 'C0230', C0230, 'C0240', C0240, 'C0250', C0250, 'C0255', C0255, 'C0256', C0256, 'C0257', C0257, \
    'C0260', C0260, 'C0270', C0270, 'C0280', C0280, 'C0290', C0290, 'C0300', C0300)  as (column_id,value)"
    
    #unpivot_df=C_08_01_3_0_temp_df.select("deal_id",expr(unpivot_col))
    unpivot_df=C_08_01_3_0_temp_df.select("year_month","return_rk","return_code","reporting_regulator_code","sheet_id","for_Adjust_flag","corep_exposure_category","C0010_NUMERATOR","C0230_NUMERATOR","C0240_NUMERATOR","C0250_NUMERATOR","C0010_DENOMINATOR","C0230_DENOMINATOR","C0240_DENOMINATOR","C0250_DENOMINATOR","REPORTING_TYPE_CODE","RWA_CALC_METHOD","risk_taker_rru","risk_on_rru","internal_transaction_flag","run_rk",expr(unpivot_col))

    int_agg2 = unpivot_df.filter("(RWA_CALC_METHOD not in ('AIRB - SL Slotting Approach')) and (REPORTING_TYPE_CODE not in ('FD'))")
    print("\n\nTotal records in int_agg2 : ", int_agg2.count());
    print("\n\n");

    int_agg2.createOrReplaceTempView("INT_AGG2")
    
    query=f'''SELECT  YEAR_MONTH
                  ,RETURN_RK
                  ,RETURN_CODE
                  ,'R0070'  ROW_ID
                  ,Coalesce(substring(COLUMN_ID,1,5),0)  COLUMN_ID
                  ,REPORTING_REGULATOR_CODE
                  ,SHEET_ID
                  ,CASE
                     WHEN COLUMN_ID = 'C0250'
                      AND SHEET_ID IN ('AIRB0013',
                                       'AIRB0014',
                                       'AIRB0015',
                                       'AIRB0016',
                                       'AIRB0017')
                     THEN 'N'
                     ELSE NULL
                   END  APPL_DATA_POINT_FLAG
                  ,FOR_ADJUST_FLAG
                  ,SUM(VALUE)  VALUE
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_NUMERATOR) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_NUMERATOR) )
                     WHEN COLUMN_ID = 'C0240'
                     THEN ( SUM(C0240_NUMERATOR) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_NUMERATOR) )
                     ELSE NULL
                   END  VALUE_NUMERATOR
                  ,CASE
                     WHEN COLUMN_ID = 'C0010'
                     THEN ( SUM(C0010_DENOMINATOR) )
                     WHEN COLUMN_ID = 'C0230'
                     THEN ( SUM(C0230_DENOMINATOR) )
                     WHEN COLUMN_ID = 'C0240'
                     THEN ( SUM(C0240_DENOMINATOR) )
                     WHEN COLUMN_ID = 'C0250'
                     THEN ( SUM(C0250_DENOMINATOR) )
                     ELSE NULL
                   END  VALUE_DENOMINATOR
                  ,RISK_TAKER_RRU
                  ,RISK_ON_RRU
                  ,INTERNAL_TRANSACTION_FLAG
                  ,RUN_RK
            FROM INT_AGG2
            GROUP BY YEAR_MONTH, RETURN_RK, RETURN_CODE, COLUMN_ID, REPORTING_REGULATOR_CODE,
                     SHEET_ID, FOR_ADJUST_FLAG, RISK_TAKER_RRU, RISK_ON_RRU, INTERNAL_TRANSACTION_FLAG, RUN_RK'''
    
    unpivoted_C_08_01_df7= spark.sql(query)
    
    return unpivoted_C_08_01_df7

###################################################################################################################
############# This function is called inside INT_C_08_01_DF2 function and used to implement unpivot logic  ########
###################################################################################################################	
def unpivot_C_08_01_df8(spark,C_08_01_3_0_temp_df):
    
    
    unpivot_col="stack(10,'C0020', C0020, 'C0090', C0090, 'C0100', C0100, 'C0110', C0110, 'C0120', C0120, \
    'C0130_REPO_OTC', C0130_REPO_OTC, 'C0260', C0260, 'C0280', C0280, 'C0290', C0290, 'C0300', C0300)  as (column_id,value)"
    
    #unpivot_df=C_08_01_3_0_temp_df.select("deal_id",expr(unpivot_col))
    unpivot_df=C_08_01_3_0_temp_df.select("year_month","return_rk","return_code","reporting_regulator_code","sheet_id","for_Adjust_flag","corep_exposure_category","risk_taker_rru","risk_on_rru","internal_transaction_flag","run_rk","RWA_CALC_METHOD",expr(unpivot_col))
    int_agg2 = unpivot_df.filter("RWA_CALC_METHOD = 'AIRB - SL Slotting Approach'")
    print("\n\nTotal records in int_agg2 : ", int_agg2.count());
    print("\n\n");

    int_agg2.createOrReplaceTempView("INT_AGG2")


    #unpivot_df.createOrReplaceTempView("INT_AGG2")
    
    query=f'''SELECT  YEAR_MONTH
                  ,RETURN_RK
                  ,RETURN_CODE
                  ,'R0080'  ROW_ID
                  ,Coalesce(substring(COLUMN_ID,1,5),0)  COLUMN_ID
                  ,REPORTING_REGULATOR_CODE
                  ,SHEET_ID
                  ,NULL  APPL_DATA_POINT_FLAG
                  ,FOR_ADJUST_FLAG
                  ,SUM(VALUE)  VALUE
                  ,NULL  VALUE_NUMERATOR
                  ,NULL  VALUE_DENOMINATOR
                  ,RISK_TAKER_RRU
                  ,RISK_ON_RRU
                  ,INTERNAL_TRANSACTION_FLAG
                  ,RUN_RK
            FROM INT_AGG2
            GROUP BY YEAR_MONTH, RETURN_RK, RETURN_CODE, COLUMN_ID, REPORTING_REGULATOR_CODE,
                     SHEET_ID, FOR_ADJUST_FLAG, RISK_TAKER_RRU, RISK_ON_RRU, INTERNAL_TRANSACTION_FLAG, RUN_RK'''
    
    unpivoted_C_08_01_df8= spark.sql(query)
    
    return unpivoted_C_08_01_df8

###################################################################################################################
############# This function is called inside INT_C_08_01_DF2 function and used to implement unpivot logic  ########
###################################################################################################################	
def unpivot_C_08_01_df9(spark,C_08_01_3_0_temp_df):
    
    
    unpivot_col="stack(10,'C0020', C0020, 'C0090', C0090, 'C0100', C0100, 'C0110', C0110, 'C0120', C0120, \
    'C0130_REPO_OTC', C0130_REPO_OTC, 'C0260', C0260, 'C0280', C0280, 'C0290', C0290, 'C0300', C0300)  as (column_id,value)"
    
    #unpivot_df=C_08_01_3_0_temp_df.select("deal_id",expr(unpivot_col))
    unpivot_df=C_08_01_3_0_temp_df.select("year_month","return_rk","return_code","reporting_regulator_code","sheet_id","for_Adjust_flag","corep_exposure_category","risk_taker_rru","risk_on_rru","internal_transaction_flag","run_rk","REPORTING_TYPE_CODE",expr(unpivot_col))
    int_agg2 = unpivot_df.filter("REPORTING_TYPE_CODE = 'FD'")
    print("\n\nTotal records in int_agg2 : ", int_agg2.count());
    print("\n\n");

    int_agg2.createOrReplaceTempView("INT_AGG2")

    #unpivot_df.createOrReplaceTempView("INT_AGG2")
    
    query=f'''SELECT  YEAR_MONTH
                  ,RETURN_RK
                  ,RETURN_CODE
                  ,'R0170'  ROW_ID
                  ,Coalesce(substring(COLUMN_ID,1,5),0)  COLUMN_ID
                  ,REPORTING_REGULATOR_CODE
                  ,SHEET_ID
                  ,NULL  APPL_DATA_POINT_FLAG
                  ,FOR_ADJUST_FLAG
                  ,SUM(VALUE)  VALUE
                  ,NULL  VALUE_NUMERATOR
                  ,NULL  VALUE_DENOMINATOR
                  ,RISK_TAKER_RRU
                  ,RISK_ON_RRU
                  ,INTERNAL_TRANSACTION_FLAG
                  ,RUN_RK
            FROM INT_AGG2
            GROUP BY YEAR_MONTH, RETURN_RK, RETURN_CODE, COLUMN_ID, REPORTING_REGULATOR_CODE,
                     SHEET_ID, FOR_ADJUST_FLAG, RISK_TAKER_RRU, RISK_ON_RRU, INTERNAL_TRANSACTION_FLAG, RUN_RK'''
    
    unpivoted_C_08_01_df9= spark.sql(query)
    
    return unpivoted_C_08_01_df9

###################################################################################################################
############# This function is called inside DPM_C_08_01 function and used to implement int_agg_dp         ########
###################################################################################################################	
def INT_C_08_01_DF2(spark,C_08_01_3_0_temp_df,srtd_mart_db):
    
    df1 = unpivot_C_08_01_df1(spark,C_08_01_3_0_temp_df)
    
    #print("writing first unpivot")
    #df1.write.format("parquet").mode("overwrite").saveAsTable(srtd_mart_db + '.' + 'FIRST_UNPIVOT_C801')
                              
    df2 = unpivot_C_08_01_df2(spark,C_08_01_3_0_temp_df)
                              
    df3 = unpivot_C_08_01_df3(spark,C_08_01_3_0_temp_df)
                              
    df4 = unpivot_C_08_01_df4(spark,C_08_01_3_0_temp_df)
                              
    df5 = unpivot_C_08_01_df5(spark,C_08_01_3_0_temp_df)
                              
    df6 = unpivot_C_08_01_df6(spark,C_08_01_3_0_temp_df)
                              
    df7 = unpivot_C_08_01_df7(spark,C_08_01_3_0_temp_df)
                             
    df8 = unpivot_C_08_01_df8(spark,C_08_01_3_0_temp_df)
                              
    df9 = unpivot_C_08_01_df9(spark,C_08_01_3_0_temp_df)
    
    print("dataframe post unpivot union")
    INT_C_08_01_DF2 = df1.unionByName(df2).unionByName(df3).unionByName(df4).unionByName(df5).unionByName(df6).unionByName(df7).unionByName(df8).unionByName(df9)
    #INT_C_08_01_DF2.write.format("parquet").mode("overwrite").saveAsTable(srtd_mart_db + '.' + 'UNION_UNPIVOT_C801')
    return INT_C_08_01_DF2

###################################################################################################################
############# This function is called inside DPM_C_08_01 function                                          ########
###################################################################################################################
def create_C_08_01_df1(spark, frank_db):
    
    query=f'''SELECT iad.YEAR_MONTH,
                  iad.RETURN_RK,
                  iad.RETURN_CODE,
                  iad.ROW_ID,
                  iad.COLUMN_ID,
                  iad.REPORTING_REGULATOR_CODE,
                  ig.RISK_TAKER_GROUP,
                  " ".  GROUP_TEXT,
                  iad.SHEET_ID,
                  iad.APPL_DATA_POINT_FLAG,
                  iad.FOR_ADJUST_FLAG,
                  ROUND (CASE
                           WHEN iad.ROW_ID IN ('R0010', 'R0015', 'R0016', 'R0070')  
                           THEN CASE
                                  WHEN iad.COLUMN_ID IN ('C0010', 'C0230', 'C0240', 'C0250')
                                  THEN (  SUM (iad.VALUE_NUMERATOR)
                                        / NULLIF (SUM (iad.VALUE_DENOMINATOR), 0))
                                  ELSE SUM (iad.VALUE)
                                END
                           WHEN iad.ROW_ID IN ('R0020', 'R0030', 'R0040', 'R0050')
                           THEN CASE
                                  WHEN iad.COLUMN_ID IN ('C0010', 'C0230', 'C0250')
                                  THEN (  SUM (iad.VALUE_NUMERATOR)
                                        / NULLIF (SUM (iad.VALUE_DENOMINATOR), 0))
                                  ELSE SUM (iad.VALUE)
                                END
                           ELSE SUM (iad.VALUE)
                         END, 15)  VALUE,
                  iad.run_rk
           FROM INT_AGG_DP iad,
                {frank_db}.DIM_REP_INTRAGROUP_MAP ig
           WHERE iad.RISK_TAKER_RRU = ig.RISK_TAKER_RRU_RK
             AND iad.RISK_ON_RRU = ig.RISK_ON_RRU_RK
             AND iad.YEAR_MONTH = ig.YEAR_MONTH_RK
             AND ig.RISK_TAKER_RRU_RK NOT LIKE '%DECON%'
             AND iad.INTERNAL_TRANSACTION_FLAG = ig.INTERNAL_TRANSACTION_FLAG
             AND ig.RISK_TAKER_GROUP IS NOT NULL
             AND ig.REPORTING_DESC = 'External'
           GROUP BY iad.YEAR_MONTH,
                    iad.RETURN_RK,
                    iad.RETURN_CODE,
                    iad.ROW_ID,
                    iad.COLUMN_ID,
                    iad.REPORTING_REGULATOR_CODE,
                    ig.RISK_TAKER_GROUP,
                    iad.SHEET_ID,
                    iad.APPL_DATA_POINT_FLAG,
                    iad.FOR_ADJUST_FLAG,
                    iad.RUN_RK'''
    
    create_C_08_01_df1= spark.sql(query)
    
    return create_C_08_01_df1

###################################################################################################################
############# This function will create a temp view on the spark session                            ###############
#############    that will be used in gathering attributes for create_C_08_01_df2                   ###############
#############    This function is called inside DPM_C_08_01 function.                               ###############
###################################################################################################################
def get_input_df_for_create_C_08_01_df2(spark, rtd_mart_db, srtd_mart_db, frank_db, p_reporting_date):
      query = f"""
            SELECT 
                  fct.YEAR_MONTH,
                  fct.REPORTING_REGULATOR_CODE,
                  ig.RISK_TAKER_GROUP,
                  fct.EXTERNAL_COUNTERPARTY_ID,
                  fct.B3_SME_RP_FLAG,
                  fct.PERS_ACC_FLAG,
                  fct.B3_SME_DISCOUNT_FLAG,
                  fct.CRR2_501A_DISCOUNT_FLAG,
                  fct.corep_exposure_category,
                  fct.RETAIL_OFF_BAL_SHEET_FLAG,
                  fct.REPORTING_TYPE_CODE,
                  fct.rwa_calc_method,
                  fct.PD_BAND_CODE,
                  dac.REG_EXPOSURE_TYPE
               FROM {srtd_mart_db}.corep_crd4_mart fct,
                    {frank_db}.DIM_ASSET_CLASS dac,
                    {frank_db}.DIM_REP_INTRAGROUP_MAP ig,
                    {rtd_mart_db}.DPM_PARAMETER d_parm_div
               WHERE dac.ASSET_CLASS_RK = fct.COREP_IRB_ASSET_CLASS_RK
                   AND fct.DIVISION = d_parm_div.PARAMETER1_VALUE
                   AND d_parm_div.param_code = 'DIVISION'
                   AND d_parm_div.PARAMETER2_VALUE = 'Y'
                   AND d_parm_div.valid_from_date <= "{p_reporting_date}"
                   AND d_parm_div.valid_to_date > "{p_reporting_date}"
                   AND fct.INTERNAL_TRANSACTION_FLAG =  IG.INTERNAL_TRANSACTION_FLAG
                   AND IG.RISK_TAKER_GROUP IS NOT NULL
                   AND fct.RISK_TAKER_RRU = IG.RISK_TAKER_RRU_RK
                   AND fct.RISK_ON_RRU = IG.RISK_ON_RRU_RK
                   AND fct.YEAR_MONTH = IG.YEAR_MONTH_RK
                   AND IG.RISK_TAKER_RRU_RK NOT LIKE '%DECON%'
                   AND (   (ig.REPORTING_DESC = 'External')
                                OR (    ig.REPORTING_DESC = 'Inter Group'
                                    AND (    COALESCE (fct.IG_EXCLUSION_FLAG, 'N') <> 'Y'
                                         AND NOT (    COALESCE ( fct.IG_EXCLUSION_FLAG, 'X') = 'N'
                                                  AND COALESCE ( fct.RISK_TAKER_GS_CODE, 'x') = 'CORE' 
                                                  AND COALESCE (fct.RISK_ON_GS_CODE, 'x') = 'CORE')) 
                                    AND fct.REPORTING_REGULATOR_CODE IN ('UK-FSA', 'CBI')) ) 
      """
    input_df = spark.sql(query)
    return input_df

###################################################################################################################
############# This function is called inside DPM_C_08_01 function                                          ########
###################################################################################################################
def create_C_08_01_df2(spark, rtd_mart_db, srtd_mart_db, frank_db, p_reporting_date,v_return_code,v_return_rk,p_run_rk):
    
    input_df_for_create_C_08_01_df2 = get_input_df_for_create_C_08_01_df2(spark, rtd_mart_db, srtd_mart_db, frank_db, p_reporting_date)
    input_df_for_create_C_08_01_df2 = input_df_for_create_C_08_01_df2.persist(StorageLevel.MEMORY_AND_DISK_SER)
    input_df_for_create_C_08_01_df2.createOrReplaceTempView('input_df_view_create_C_08_01_df2')

    query=f'''SELECT 
                     input_df.YEAR_MONTH,
                     {v_return_rk}  RETURN_RK,
                     "{v_return_code}"  RETURN_CODE,
                     input_df.REPORTING_REGULATOR_CODE  REPORTING_REGULATOR_CODE,
                     input_df.RISK_TAKER_GROUP  RISK_TAKER_GROUP,
                     COUNT (DISTINCT (input_df.EXTERNAL_COUNTERPARTY_ID))  R0010,
                     COUNT (
                            DISTINCT (CASE
                                        WHEN (   input_df.B3_SME_RP_FLAG = 'Y'
                                              OR input_df.PERS_ACC_FLAG = 'N')
                                        AND  input_df.B3_SME_DISCOUNT_FLAG = 'Y'
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0015, 
                     COUNT (
                            DISTINCT (CASE
                                        WHEN input_df.CRR2_501A_DISCOUNT_FLAG = 'Y'
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0016, 
                     COUNT (
                            DISTINCT (CASE
                                       WHEN input_df.corep_exposure_category = 'ON BALANCE SHEET'
                                       THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0020,
                     COUNT (
                            DISTINCT (CASE
                                        WHEN    input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                                             OR (    input_df.corep_exposure_category = 'ON BALANCE SHEET'
                                                 AND input_df.RETAIL_OFF_BAL_SHEET_FLAG = 'Y')
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0030,
                     COUNT (
                            DISTINCT (CASE
                                        WHEN     input_df.corep_exposure_category = 'SECURITIES FINANCING'
                                             AND COALESCE (input_df.REPORTING_TYPE_CODE, 'X') <> 'LS'
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0040,
                     COUNT (
                            DISTINCT (CASE
                                       WHEN (   input_df.corep_exposure_category = 'DERIVATIVES'
                                             OR input_df.REPORTING_TYPE_CODE = 'LS')
                                       THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0050,
                     COUNT (
                            DISTINCT (CASE
                                        WHEN     COALESCE (input_df.rwa_calc_method, 'X') <> 'AIRB - SL Slotting Approach'
                                             AND COALESCE (input_df.REPORTING_TYPE_CODE, 'X') <> 'FD'
                                             AND input_df.PD_BAND_CODE <> 'UNKNOWN'
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0070,
                     COUNT (
                            DISTINCT (CASE
                                        WHEN     input_df.rwa_calc_method = 'AIRB - SL Slotting Approach'
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0080,
                     CASE input_df.REG_EXPOSURE_TYPE
                       WHEN 'Central governments and central banks'
                       THEN 'AIRB0003'
                       WHEN 'Institutions'
                       THEN 'AIRB0005'
                       WHEN 'Corporates - SME'
                       THEN 'AIRB0007'
                       WHEN 'Corporates - Specialised Lending'
                       THEN 'AIRB0009'
                       WHEN 'Corporates - Other'
                       THEN 'AIRB0011'
                       WHEN 'Retail - Secured by immovable property SME'
                       THEN 'AIRB0013'
                       WHEN 'Retail - Secured by immovable property non-SME'
                       THEN 'AIRB0014'
                       WHEN 'Retail - Qualifying revolving'
                       THEN 'AIRB0015'
                       WHEN 'Retail - Other SME'
                       THEN 'AIRB0016'
                       WHEN 'Retail - Other non-SME'
                       THEN 'AIRB0017'
                     END  SHEET_ID,
                     NULL  APPL_DATA_POINT_FLAG,
                     NULL  FOR_ADJUST_FLAG,
                     {p_run_rk}  RUN_RK
               FROM input_df_view_create_C_08_01_df2 input_df
               GROUP BY input_df.YEAR_MONTH,
                        input_df.REG_EXPOSURE_TYPE,
                        input_df.REPORTING_REGULATOR_CODE,
                        input_df.RISK_TAKER_GROUP'''
    
    df= spark.sql(query)
    
    unpivot_row="stack(8,'R0010', R0010, 'R0015', R0015, 'R0016', R0016, 'R0020', R0020, 'R0030', R0030, \
    'R0040', R0040, 'R0050', R0050, 'R0070', R0070 ) as (ROW_ID,VALUE)"
    
    unpivot_df=df.select("year_month", "return_rk", "RETURN_CODE", "REPORTING_REGULATOR_CODE",
                         "RISK_TAKER_GROUP","SHEET_ID", "APPL_DATA_POINT_FLAG", "FOR_ADJUST_FLAG",
                         "RUN_RK",expr(unpivot_row))
    
    create_C_08_01_df2=unpivot_df.withColumn("column_id", lit("C0300")) \
    .withColumn("GROUP_TEXT", lit(None).cast(StringType()))
    
    return create_C_08_01_df2

###################################################################################################################
############# This function is called inside DPM_C_08_01 function                                          ########
###################################################################################################################	
def create_C_08_01_df3(spark, frank_db):
        
    query=f'''SELECT iad.YEAR_MONTH,
                  iad.RETURN_RK,
                  iad.RETURN_CODE,
                  iad.ROW_ID,
                  iad.COLUMN_ID,
                  iad.REPORTING_REGULATOR_CODE,
                  ig.RISK_TAKER_GROUP,
                  ""  GROUP_TEXT,
                  'AIRB0001'  SHEET_ID,
                  "" APPL_DATA_POINT_FLAG,
                  iad.FOR_ADJUST_FLAG,
                  ROUND (CASE
                           WHEN iad.ROW_ID IN ('R0010', 'R0015', 'R0016', 'R0070')  
                           THEN CASE
                                  WHEN iad.COLUMN_ID IN ('C0010', 'C0230', 'C0240', 'C0250')
                                  THEN (  SUM (iad.VALUE_NUMERATOR)
                                        / NULLIF (SUM (iad.VALUE_DENOMINATOR), 0))
                                  ELSE SUM (iad.VALUE)
                                END
                           WHEN iad.ROW_ID IN ('R0020', 'R0030', 'R0040', 'R0050')
                           THEN CASE
                                  WHEN iad.COLUMN_ID IN ('C0010', 'C0230', 'C0250')
                                  THEN (  SUM (iad.VALUE_NUMERATOR)
                                        / NULLIF (SUM (iad.VALUE_DENOMINATOR), 0))
                                  ELSE SUM (iad.VALUE)
                                END
                           ELSE SUM (iad.VALUE)
                         END, 15)  VALUE,
                  iad.run_rk
           FROM INT_AGG_DP iad,
                {frank_db}.DIM_REP_INTRAGROUP_MAP ig
           WHERE iad.RISK_TAKER_RRU = ig.RISK_TAKER_RRU_RK
             AND iad.RISK_ON_RRU = ig.RISK_ON_RRU_RK
             AND iad.YEAR_MONTH = ig.YEAR_MONTH_RK
             AND ig.RISK_TAKER_RRU_RK NOT LIKE '%DECON%'
             AND iad.INTERNAL_TRANSACTION_FLAG = ig.INTERNAL_TRANSACTION_FLAG
             AND ig.RISK_TAKER_GROUP IS NOT NULL
             AND ig.REPORTING_DESC = 'External'
           GROUP BY iad.YEAR_MONTH,
                    iad.RETURN_RK,
                    iad.RETURN_CODE,
                    iad.ROW_ID,
                    iad.COLUMN_ID,
                    iad.REPORTING_REGULATOR_CODE,
                    ig.RISK_TAKER_GROUP,
                    iad.FOR_ADJUST_FLAG,
                    iad.RUN_RK'''
    
    create_C_08_01_df3= spark.sql(query)
    
    return create_C_08_01_df3

###################################################################################################################
############# This function will create a temp view on the spark session                            ###############
#############    that will be used in gathering attributes for create_C_08_01_df4                   ###############
#############    This function is called inside DPM_C_08_01 function.                               ###############
###################################################################################################################	
def get_input_df_for_create_C_08_01_df4(spark, rtd_mart_db, srtd_mart_db, frank_db, p_reporting_date):
      query = f"""
            SELECT 
                  fct.YEAR_MONTH,
                  fct.REPORTING_REGULATOR_CODE,
                  ig.RISK_TAKER_GROUP,
                  fct.EXTERNAL_COUNTERPARTY_ID,
                  fct.B3_SME_RP_FLAG,
                  fct.PERS_ACC_FLAG,
                  fct.B3_SME_DISCOUNT_FLAG,
                  fct.CRR2_501A_DISCOUNT_FLAG,
                  fct.corep_exposure_category,
                  fct.RETAIL_OFF_BAL_SHEET_FLAG,
                  fct.REPORTING_TYPE_CODE,
                  fct.rwa_calc_method,
                  fct.PD_BAND_CODE,
                  dac.REG_EXPOSURE_TYPE
            FROM {srtd_mart_db}.corep_crd4_mart fct,
                  {frank_db}.DIM_ASSET_CLASS dac,
                  {frank_db}.DIM_REP_INTRAGROUP_MAP ig,
                  {rtd_mart_db}.DPM_PARAMETER d_parm_div
            WHERE dac.ASSET_CLASS_RK = fct.COREP_IRB_ASSET_CLASS_RK
                  AND fct.DIVISION = d_parm_div.PARAMETER1_VALUE
                  AND d_parm_div.param_code = 'DIVISION'
                  AND d_parm_div.PARAMETER2_VALUE = 'Y'
                  AND d_parm_div.valid_from_date <= "{p_reporting_date}"
                  AND d_parm_div.valid_to_date > "{p_reporting_date}"
                  AND fct.INTERNAL_TRANSACTION_FLAG =  IG.INTERNAL_TRANSACTION_FLAG
                  AND IG.RISK_TAKER_GROUP IS NOT NULL
                  AND fct.RISK_TAKER_RRU = IG.RISK_TAKER_RRU_RK
                  AND fct.RISK_ON_RRU = IG.RISK_ON_RRU_RK
                  AND fct.YEAR_MONTH = IG.YEAR_MONTH_RK
                  AND IG.RISK_TAKER_RRU_RK NOT LIKE '%DECON%'
                  AND (   (ig.REPORTING_DESC = 'External')
                              OR (    ig.REPORTING_DESC = 'Inter Group'
                              AND (    COALESCE (fct.IG_EXCLUSION_FLAG, 'N') <> 'Y'
                                    AND NOT (    COALESCE ( fct.IG_EXCLUSION_FLAG, 'X') = 'N'
                                                AND COALESCE ( fct.RISK_TAKER_GS_CODE, 'x') = 'CORE' 
                                                AND COALESCE (fct.RISK_ON_GS_CODE, 'x') = 'CORE')) 
                              AND fct.REPORTING_REGULATOR_CODE IN ('UK-FSA', 'CBI')) ) 
      """
      input_df = spark.sql(query)
	  input_df = input_df.distinct()
      return input_df

###################################################################################################################
############# This function is called inside DPM_C_08_01 function                                          ########
###################################################################################################################
def create_C_08_01_df4(spark, rtd_mart_db, srtd_mart_db, frank_db, p_reporting_date,v_return_code,v_return_rk,p_run_rk):
    input_df_for_create_C_08_01_df4 = get_input_df_for_create_C_08_01_df4(spark, rtd_mart_db, srtd_mart_db, frank_db, p_reporting_date)
    input_df_for_create_C_08_01_df4 = input_df_for_create_C_08_01_df4.persist(StorageLevel.MEMORY_AND_DISK_SER)
    input_df_for_create_C_08_01_df4.createOrReplaceTempView('input_df_view_create_C_08_01_df4')

    query=f'''SELECT 
                     input_df.YEAR_MONTH,
                     {v_return_rk}  RETURN_RK,
                     "{v_return_code}"  RETURN_CODE,
                     input_df.REPORTING_REGULATOR_CODE  REPORTING_REGULATOR_CODE,
                     input_df.RISK_TAKER_GROUP  RISK_TAKER_GROUP,
                     COUNT (DISTINCT (input_df.EXTERNAL_COUNTERPARTY_ID))  R0010,
                     COUNT (
                            DISTINCT (CASE
                                        WHEN (   input_df.B3_SME_RP_FLAG = 'Y'
                                              OR input_df.PERS_ACC_FLAG = 'N')
                                        AND  input_df.B3_SME_DISCOUNT_FLAG = 'Y'
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0015, 
                     COUNT (
                            DISTINCT (CASE
                                        WHEN input_df.CRR2_501A_DISCOUNT_FLAG = 'Y'
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0016, 
                     COUNT (
                            DISTINCT (CASE
                                       WHEN input_df.corep_exposure_category = 'ON BALANCE SHEET'
                                       THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0020,
                     COUNT (
                            DISTINCT (CASE
                                        WHEN    input_df.corep_exposure_category = 'OFF BALANCE SHEET'
                                             OR (    input_df.corep_exposure_category = 'ON BALANCE SHEET'
                                                 AND input_df.RETAIL_OFF_BAL_SHEET_FLAG = 'Y')
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0030,
                     COUNT (
                            DISTINCT (CASE
                                        WHEN     input_df.corep_exposure_category = 'SECURITIES FINANCING'
                                             AND COALESCE (input_df.REPORTING_TYPE_CODE, 'X') <> 'LS'
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0040,
                     COUNT (
                            DISTINCT (CASE
                                       WHEN (   input_df.corep_exposure_category = 'DERIVATIVES'
                                             OR input_df.REPORTING_TYPE_CODE = 'LS')
                                       THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0050,
                     COUNT (
                            DISTINCT (CASE
                                        WHEN     COALESCE (input_df.rwa_calc_method, 'X') <> 'AIRB - SL Slotting Approach'
                                             AND COALESCE (input_df.REPORTING_TYPE_CODE, 'X') <> 'FD'
                                             AND input_df.PD_BAND_CODE <> 'UNKNOWN'
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0070,
                     COUNT (
                            DISTINCT (CASE
                                        WHEN     input_df.rwa_calc_method = 'AIRB - SL Slotting Approach'
                                        THEN input_df.EXTERNAL_COUNTERPARTY_ID
                                      END))  R0080,
                     'AIRB0001'  SHEET_ID,
                     ""  APPL_DATA_POINT_FLAG,
                     ""  FOR_ADJUST_FLAG,
                     {p_run_rk}  RUN_RK
               FROM input_df_view_create_C_08_01_df4 input_df
               GROUP BY input_df.YEAR_MONTH,
                        input_df.REPORTING_REGULATOR_CODE,
                        input_df.RISK_TAKER_GROUP'''
    
    df= spark.sql(query)
    
    unpivot_row="stack(8,'R0010', R0010, 'R0015', R0015, 'R0016', R0016, 'R0020', R0020, 'R0030', R0030, \
    'R0040', R0040, 'R0050', R0050, 'R0070', R0070 ) as (ROW_ID,VALUE)"
    
    unpivot_df=df.select("year_month", "return_rk", "RETURN_CODE", "REPORTING_REGULATOR_CODE",
                         "RISK_TAKER_GROUP","SHEET_ID", "APPL_DATA_POINT_FLAG", "FOR_ADJUST_FLAG",
                         "RUN_RK",expr(unpivot_row))
    
    create_C_08_01_df4=unpivot_df.withColumn("column_id", lit("C0300")) \
    .withColumn("GROUP_TEXT", lit(None).cast(StringType()))
    
    return create_C_08_01_df4

###################################################################################################################
############# This function is called inside DPM_C_08_01 function                                          ########
###################################################################################################################	
def create_C_08_01_df5(spark,rtd_mart_db,frank_db, C_08_01_3_0_temp_df):
    
    int_agg_df = INT_C_08_01_DF1(C_08_01_3_0_temp_df)
    
    int_agg_df.createOrReplaceTempView("INT_DPM_DIST_MEM")
    
    query=f'''SELECT  iddm.YEAR_MONTH,
                    iddm.RETURN_RK,
                    iddm.RETURN_CODE,
                    rcv.ROW_ID,
                    rcv.COLUMN_ID,
                    iddm.REPORTING_REGULATOR_CODE,
                    ig.RISK_TAKER_GROUP,
                    ""  GROUP_TEXT,
                    iddm.SHEET_ID,
                    'N'  APPL_DATA_POINT_FLAG,
                    ""  FOR_ADJUST_FLAG,
                    ""  VALUE,
                    iddm.RUN_RK
            FROM INT_DPM_DIST_MEM iddm,
                 {rtd_mart_db}.DIM_DPM_TEMPLATE_ROW_COL_VW rcv,
                 {frank_db}.DIM_REP_INTRAGROUP_MAP ig,
                 (SELECT 'AIRB0013'  SHEET_ID FROM INT_DPM_DIST_MEM
                  UNION ALL
                  SELECT 'AIRB0014'  SHEET_ID FROM INT_DPM_DIST_MEM
                  UNION ALL
                  SELECT 'AIRB0015'  SHEET_ID FROM INT_DPM_DIST_MEM
                  UNION ALL
                  SELECT 'AIRB0016'  SHEET_ID FROM INT_DPM_DIST_MEM
                  UNION ALL
                  SELECT 'AIRB0017'  SHEET_ID FROM INT_DPM_DIST_MEM) C0250_non_appl
            WHERE iddm.RISK_TAKER_RRU = ig.RISK_TAKER_RRU_RK
              AND iddm.RISK_ON_RRU = ig.RISK_ON_RRU
              AND iddm.YEAR_MONTH = ig.YEAR_MONTH_RK
              AND ig.RISK_TAKER_RRU_RK NOT LIKE '%DECON%'
              AND iddm.INTERNAL_TRANSACTION_FLAG = ig.INTERNAL_TRANSACTION_FLAG
              AND ig.RISK_TAKER_GROUP IS NOT NULL
              AND ig.REPORTING_DESC = 'External'
              AND rcv.YEAR_MONTH_RK = iddm.YEAR_MONTH
              AND rcv.REPORTING_REGULATOR_CODE = iddm.REPORTING_REGULATOR_CODE
              AND rcv.TEMPLATE_RK = iddm.TEMPLATE_RK
              AND rcv.COLUMN_ID = 'C0250'
              AND rcv.APPL_DATA_POINT_FLAG = 'Y'
              AND iddm.SHEET_ID = C0250_non_appl.SHEET_ID'''
    
    create_C_08_01_df5= spark.sql(query)
    
    return create_C_08_01_df5

###################################################################################################################
############# This function is called inside DPM_C_08_01 function                                          ########
###################################################################################################################	
def create_C_08_01_df6(spark, rtd_mart_db, p_reporting_date,v_year_month_rk,v_return_code,v_return_rk,p_run_rk,v_template_rk, C_08_01_3_0_temp_df):
    
    int_agg_df = INT_C_08_01_DF1(C_08_01_3_0_temp_df)
    
    int_agg_df.createOrReplaceTempView("INT_DPM_DIST_MEM")
    
    query=f'''SELECT  
                    {v_year_month_rk}  YEAR_MONTH,
                    {v_return_rk}  RETURN_RK,
                    "{v_return_code}"  RETURN_CODE,
                    rcv.ROW_ID,
                    rcv.COLUMN_ID,
                    reg.MEMBER_CODE  REPORTING_REGULATOR_CODE,
                    risk_taker.MEMBER_CODE  RISK_TAKER_GROUP,
                    ""  GROUP_TEXT,
                    sheet.member_code  SHEET_ID,
                    CASE
                      WHEN rcv.COLUMN_ID = 'C0250'
                       AND sheet.MEMBER_CODE IN ('AIRB0013',
                                                 'AIRB0014',
                                                 'AIRB0015',
                                                 'AIRB0016',
                                                 'AIRB0017')
                      THEN 'N'
                      ELSE ""
                    END  APPL_DATA_POINT_FLAG,
                    'A'  FOR_ADJUST_FLAG,
                    CASE
                      WHEN rcv.APPL_DATA_POINT_FLAG = 'Y'
                      THEN  0
                      ELSE ""
                    END  VALUE,
                    {p_run_rk}  RUN_RK
             FROM {rtd_mart_db}.DIM_DPM_TEMPLATE_ROW_COL_VW rcv,
                  {rtd_mart_db}.DIM_DPM_MEMBER reg,
                  {rtd_mart_db}.DIM_DPM_MEMBER risk_taker,
                  {rtd_mart_db}.DIM_DPM_SHEET_VW sheet,
                  {rtd_mart_db}.DIM_DPM_RETURN dim_ret,
                  {rtd_mart_db}.DIM_DPM_TEMPLATE dim_tem,
                  {rtd_mart_db}.DPM_PARAMETER d_parm
             WHERE dim_ret.return_rk = {v_return_rk}
               AND dim_ret.template_rk = dim_tem.template_rk
               AND dim_tem.template_rk = rcv.template_rk
               AND dim_ret.RETURN_CODE = "{v_return_code}"
               AND dim_ret.VALID_FROM_DATE <= "{p_reporting_date}"
               AND dim_ret.VALID_TO_DATE > "{p_reporting_date}"
               AND rcv.REPORTING_REGULATOR_CODE IN ('UK-FSA', 'CBI')
               AND rcv.reporting_regulator_code = reg.MEMBER_CODE
               AND rcv.YEAR_MONTH_RK = {v_year_month_rk}
               AND reg.VALID_FROM_DATE <= "{p_reporting_date}"
               AND reg.VALID_TO_DATE > "{p_reporting_date}"
               AND reg.DOMAIN_RK in (select domain_rk from {rtd_mart_db}.dim_dpm_domain
                                     where DOMAIN_CODE = 'REG_CODE'
                                       and VALID_FROM_DATE <= "{p_reporting_date}"
                                       and VALID_TO_DATE > "{p_reporting_date}")
               AND risk_taker.VALID_FROM_DATE <= "{p_reporting_date}"
               AND risk_taker.VALID_TO_DATE > "{p_reporting_date}"
               AND risk_taker.DOMAIN_RK in (select domain_rk from {rtd_mart_db}.dim_dpm_domain
                                            where DOMAIN_CODE = 'REP_ENTITY'
                                              and VALID_FROM_DATE <= "{p_reporting_date}"
                                              and VALID_TO_DATE > "{p_reporting_date}")
               AND sheet.YEAR_MONTH_RK = {v_year_month_rk}
               AND sheet.reporting_regulator_code = reg.MEMBER_CODE
               AND sheet.DOMAIN_RK in (select domain_rk from {rtd_mart_db}.dim_dpm_domain
                                       where DOMAIN_CODE = 'EC_COREP_IRB'
                                         and VALID_FROM_DATE <= "{p_reporting_date}"
                                         and VALID_TO_DATE > "{p_reporting_date}")
               AND reg.MEMBER_CODE = d_parm.PARAMETER1_VALUE
               AND risk_taker.MEMBER_CODE = d_parm.PARAMETER2_VALUE
               AND d_parm.PARAM_CODE = 'REGULATOR_REP_ENTITY_MAP'
               AND d_parm.VALID_FROM_DATE <= "{p_reporting_date}"
               AND d_parm.VALID_TO_DATE > "{p_reporting_date}"'''
    
    create_C_08_01_df6= spark.sql(query)
    
    return create_C_08_01_df6

###################################################################################################################
############  This function is the main function for spark-submit.                                        #########
###################################################################################################################     
def DPM_C_08_01():
    # Initialisation Part
    spark = get_spark_session()
    config = read_config(spark)
    v_return_code = 'C 08.01'
    return_code = v_return_code


    # Parameters from config file
#    p_reporting_date = config["Input_parameters"]["reporting_date"]    
    p_reporting_date = datetime.strptime('2022-03-31T00::00::00.001', '%Y-%m-%dT%H::%M::%S.%f').strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
    v_for_Adjust_flag = 'A'
    #config["Input_parameters"]["for_Adjust_flag"]
    rtd_mart_db = config["Database_details"]["rtd_mart_db"]
    srtd_mart_db = config["Database_details"]["srtd_mart_db"]
    frank_db = config["Database_details"]["frank_db"]
    sfrank_db = config["Database_details"]["sfrank_db"]
    p_run_type = config["Input_parameters"]["run_type"]
    p_batch_type = config["Input_parameters"]["batch_type"]
    v_stg_table_name = config["Input_parameters"]["stg_table_name"]
    p_run_rk = config["Input_parameters"]["run_rk"]
    
    # Calling functions to get value for return_rk based on input parameters
    p_return_rk = get_return_rk(v_return_code,p_reporting_date,rtd_mart_db)
    v_template_rk = get_template_rk(v_return_code,p_reporting_date,rtd_mart_db)
    v_year_month_rk = 202203
    v_return_rk = p_return_rk 

    print("\n\n ***step:1**** \n\n")
    input_df_view = get_input_df_for_prepare_C_08_01_3_0_temp_df(spark, rtd_mart_db, srtd_mart_db, frank_db, v_year_month_rk, p_reporting_date)
    input_df_view = input_df_view.distinct()
    #input_df_view.filter("deal_id = '400012764178598'").show()
    input_df_view = input_df_view.persist(StorageLevel.MEMORY_AND_DISK_SER)
    input_df_view.createOrReplaceTempView('input_df_view_C_08_01_3_0_temp_df')
    
    print("\n\n ***step:2**** \n\n")
    C_08_01_3_0_temp_df = prepare_C_08_01_3_0_temp_df(spark,v_return_code,v_return_rk,p_run_rk,v_template_rk)
    C_08_01_3_0_temp_df = C_08_01_3_0_temp_df.persist(StorageLevel.MEMORY_AND_DISK_SER)
    C_08_01_3_0_temp_df.createOrReplaceTempView('INT_AGG')
    
    

    print("\n\n ***step:3**** \n\n")
    int_agg_dp_df = INT_C_08_01_DF2(spark,C_08_01_3_0_temp_df,srtd_mart_db)
    int_agg_dp_df = int_agg_dp_df.persist(StorageLevel.MEMORY_AND_DISK_SER)
    int_agg_dp_df.createOrReplaceTempView('INT_AGG_DP')
    print("printing int_agg_dp before writing")

    #int_agg_dp_df.write.format("parquet").mode("overwrite").saveAsTable(srtd_mart_db + '.' + 'INT_AGG_DP_stg_C_08_01')
    print("printing int_agg_dp after writing")
    C_08_01_df1 = create_C_08_01_df1(spark, frank_db)
	C_08_01_df1 = C_08_01_df1.distinct()
	preprod_output_location = 's3://bucket-eu-west-1-978523670193-processed-data-s/presentation/rtd/srtd_mart/ankita/data_after_igjoin_c_08_01'
	C_08_01_df1.write.option("path", f"{preprod_output_location}").mode("overwrite").saveAsTable(srtd_mart_db + '.' + 'DATA_AFTER_IGJOIN_C_08_01');
    #C_08_01_df1.write.format("parquet").mode("overwrite").saveAsTable(srtd_mart_db + '.' + 'DATA_AFTER_IGJOIN_C_08_01')
    C_08_01_df2 = create_C_08_01_df2(spark, rtd_mart_db, srtd_mart_db, frank_db, p_reporting_date,v_return_code,v_return_rk,p_run_rk)
    C_08_01_df3 = create_C_08_01_df3(spark, frank_db)
    C_08_01_df4 = create_C_08_01_df4(spark, rtd_mart_db, srtd_mart_db, frank_db, p_reporting_date,v_return_code,v_return_rk,p_run_rk)
	
	print("------------------writing df4 -------------")
	preprod_output_location = 's3://bucket-eu-west-1-978523670193-processed-data-s/presentation/rtd/srtd_mart/ankita/data_after_df4_c_08_01'
	C_08_01_df4.write.option("path", f"{preprod_output_location}").mode("overwrite").saveAsTable(srtd_mart_db + '.' + 'DATA_AFTER_DF4_C_08_01');
    C_08_01_df5 = create_C_08_01_df5(spark,rtd_mart_db,frank_db, C_08_01_3_0_temp_df)
    C_08_01_df6 = create_C_08_01_df6(spark, rtd_mart_db, p_reporting_date,v_year_month_rk,v_return_code,v_return_rk,p_run_rk,v_template_rk, C_08_01_3_0_temp_df)
    
    int_df1 = C_08_01_df1.unionByName(C_08_01_df2)
    print("Writing int_df1")
    int_df1.write.format("parquet").mode("overwrite").saveAsTable(srtd_mart_db + '.' + 'int_df1_stg_C_08_01')
    print("Writing int_df2")
    int_df2 = C_08_01_df3.unionByName(C_08_01_df4)
    int_df2.write.format("parquet").mode("overwrite").saveAsTable(srtd_mart_db + '.' + 'int_df2_stg_C_08_01')

    print("\n\n ***step:4**** \n\n")
    union_df = int_df1.unionByName(int_df2).unionByName(C_08_01_df5).unionByName(C_08_01_df6)
    preprod_output_location = 's3://bucket-eu-west-1-978523670193-processed-data-s/presentation/rtd/srtd_mart/ankita/data_after_union_df_08_01'
	union_df.write.option("path", f"{preprod_output_location}").mode("overwrite").saveAsTable(srtd_mart_db + '.' + 'DATA_AFTER_UNION_DF_08_01');
    final_df = union_df.withColumn("reportable_category",lit(None).cast(StringType())) \
                        .withColumn("text_value",lit(None).cast(StringType())) \
                        .withColumn("division",lit(None).cast(StringType())) \
                        .withColumn("extract_row_id",lit(None).cast(StringType())) \
                        .withColumnRenamed("year_month","year_month_rk").cache()
    final_df = final_df.repartition(1)  
    print("**************************WRITING INTO STAGING TABLE*************************")
    final_df.write.format("parquet").partitionBy("return_code").mode("append").saveAsTable(srtd_mart_db + '.' + v_stg_table_name)
    
    # Load Function
   # load_fct_dpm_return(p_reporting_date,v_return_code,p_run_rk,v_for_Adjust_flag,v_stg_table_name,p_return_rk,v_year_month_rk,rtd_mart_db,srtd_mart_db,spark)
    
    dummy_df=spark.sql("select 1")
    return dummy_df
DPM_C_08_01()
